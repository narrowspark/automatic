<?php

declare(strict_types=1);

/**
 * This file is part of Narrowspark Framework.
 *
 * (c) Daniel Bannert <d.bannert@anolilab.de>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Narrowspark\Automatic\Prefetcher\Common\Downloader;

use JsonSerializable;
use function array_reverse;
use function preg_match;
use function strtolower;

/**
 * @author Fabien Potencier <fabien@symfony.com>
 */
/**
 * This file is automatically generated, dont change this file, otherwise the changes are lost after the next mirror update.
 *
 * @codeCoverageIgnore
 *
 * @internal
 */
class Response implements JsonSerializable
{
    private $body;

    private $origHeaders;

    private $headers;

    private $code;

    /**
     * @param null|array<string,int|mixed> $body    The response as JSON
     * @param array                        $headers
     * @param int                          $code
     */
    public function __construct(?array $body, array $headers = [], int $code = 200)
    {
        $this->body = $body;
        $this->origHeaders = $headers;
        $this->headers = $this->parseHeaders($headers);
        $this->code = $code;
    }

    public function getBody(): ?array
    {
        return $this->body;
    }

    public function getOrigHeaders(): array
    {
        return $this->origHeaders;
    }

    public function getHeaders(string $name): array
    {
        return $this->headers[strtolower($name)] ?? [];
    }

    public function getStatusCode(): int
    {
        return $this->code;
    }

    public function getHeader(string $name): string
    {
        return $this->headers[strtolower($name)][0] ?? '';
    }

    public static function fromJson(array $json): self
    {
        $response = new self($json['body']);
        $response->headers = $json['headers'];

        return $response;
    }

    public function jsonSerialize()
    {
        return ['body' => $this->body, 'headers' => $this->headers];
    }

    private function parseHeaders(array $headers): array
    {
        $values = [];

        foreach (array_reverse($headers) as $header) {
            if (preg_match('{^([^\:]+):\s*(.+?)\s*$}i', $header, $match)) {
                $values[strtolower($match[1])][] = $match[2];
            } elseif (preg_match('{^HTTP/}i', $header)) {
                break;
            }
        }

        return $values;
    }
}
